# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within ([^:]+)$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within ([^:]+):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

When /^the image "([^"]*)" in book "([^"]*)" with title "([^"]*)" exists but has no description$/ do |image_location, book_id, book_title|
  image = DynamicImage.create(:book_id => book_id, :image_location => image_location)
  image.save
end

When /^the first description for the image "([^"]*)" in book "([^"]*)" with title "([^"]*)" is "([^"]*)"$/ do |image_location, book_id, book_title, text|
  image = DynamicImage.create(:book_id => book_id, :image_location => image_location)
  image.save
  description = DynamicDescription.create(:dynamic_image_id => image['book_id'], :submitter_id => 1, :body => text)
  image.dynamic_description = description
end

When /^another description for the image "([^"]*)" in book "([^"]*)" is "([^"]*)"$/ do |image_location, book_id, text|
  image = DynamicImage.where("book_id = ? AND image_location = ?", book_id, image_location).first
  description = DynamicDescription.create(:dynamic_image_id => image['book_id'], :submitter_id => 1, :body => text)
  image.dynamic_description = description
end


Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

Then /^the response should be plain text$/ do
  page.response_headers['Content-Type'].should == 'text/plain; charset=utf-8'
end

Then /^the response should be html/ do
  page.response_headers['Content-Type'].should == 'text/html; charset=utf-8'
end

Then /^the response should be xml$/ do
  page.response_headers['Content-Type'].should == 'application/xml; charset=utf-8'
end

Then /^the response should be a zip file$/ do
  page.response_headers['Content-Type'].should == 'application/zip; charset=utf-8'
end

Then /^there should be frames$/ do
  page.should have_xpath('//frameset')
end

Then /^the xpath "([^"]*)" should exist$/ do |arg1|
  page.should have_xpath(arg1)
end

Then /^the xpath "([^"]*)" should not exist$/ do |arg1|
  page.should_not have_xpath(arg1)
end

Then /^the xpath "([^"]*)" should be "([^"]*)"$/ do |xpath, expected|
  node = page.find(:xpath, xpath)
  node.text.should == expected
end

Then /^the attribute "([^"]*)" of "([^"]*)" should be "([^"]*)"$/ do |attribute, xpath, expected|
  node = page.find(:xpath, xpath)
  node[attribute].should == expected
end

Then /^dump the page to stderr$/ do
  $stderr.puts page.body
end

When /^I wait for (\d+) seconds?$/ do |secs|
  sleep secs.to_i
end

Given /^the system clears the cached html files$/ do
  html_files = Dir.glob(File.join("","tmp", '*.html'))
  html_files.each do |file|
    File.delete(file)
  end
end

Given /^the system clears the cached files for "([^"]*)"$/ do |book_id|
  html_files = Dir.glob(File.join("","tmp", '*.html'))
  html_files.each do |file|
    File.delete(file)
  end

  specific_files = Dir.glob(File.join("", "tmp", book_id, '*.html'))
  specific_files.each do |file|
    File.delete(file)
  end

  image_files = Dir.glob(File.join("", "tmp", book_id, '*.jpg'))
  image_files.each do |file|
    File.delete(file)
  end
end

Then /^at least (\d+) images should have been unzipped into the "([^"]*)" book directory$/ do |num_images, book_id|
  images = Dir.glob(File.join("", "tmp", book_id, "images", '*.jpg'))
  assert images.size > num_images.to_i
end

Then /^a cached html for book with id "([^"]*)" should be created$/ do |book_id|
  assert File.exists?(File.join("", "tmp", book_id, book_id + ".html"))
end